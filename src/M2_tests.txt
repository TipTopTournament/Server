||||||||||||||||||||||||||||||||||UserControllerTest|||||||||||||||||||||||||||||||||||
    @Test 
    public void createUser_usernameAlreadyExistInput_409HTTPStatusResponse() throws Exception {
        //given
        User user = new User();
        user.setId(1L);
        user.setName("test_user");
        user.setUsername("test_Username");
        user.setToken("1");
        user.setStatus(UserStatus.ONLINE);

        UserPostDTO userPostDTO = new UserPostDTO();
        userPostDTO.setName("test_user");
        userPostDTO.setUsername("test_Username");

        given(userService.createUser(user)).willReturn(user);

        //when
        MockHttpServletRequestBuilder postRequest = post("/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(userPostDTO));

        //then
        mockMvc.perform(postRequest)
                .andExpect(status().isConflict());
    }

    @Test
    public void users_post_validInput() throws Exception {
    
    	//given    
    	User user = new User();
   	user.setId(1L);
    	user.setUsername("Username");
   	user.setPassword("Password");
    	user.setFullName("FullName");
   	     
    	User tempUser = userService.createUser(user);
    	UserPostDTO userPostDTO = new UserPostDTO();
    	userPostDTO.setId(1L);
    	userPostDTO.setUsername("Username");
    	userPostDTO.setPassword("Password");
    	userPostDTO.setFullName("FullName");
        
	//when
    	MockHttpServletRequestBuilder postRequest = post("/users")
             	.contentType(MediaType.APPLICATION_JSON)
             	.content(asJsonString(userPostDTO));
	//then
    	mockMvc.perform(postRequest)
             	.andExpect(status().isOk());
        
     assertEquals(userService.findUserById(tempUser.getId()).getUsername(),user.getUsername());
     assertEquals(userService.findUserById(tempUser.getId()).getPassword(),user.getPassword());
     assertEquals(userService.findUserById(tempUser.getId()).getFullName(),user.getFullName());
    }

    @Test
    public void updateUser_validInput_HttpStatus200(){
        
        //given
        User user = new User();
        user.setId(1L);
        user.setName("Test User");
        user.setUsername("testUsername");
        user.setToken("1");
        user.setStatus(UserStatus.ONLINE);

        UserPutDTO userPutDTO = new UserPutDTO();
        userPutDTO.setUserState(UserState.NOT_PRESENT);
        userPutDTO.setTournament("SwitzerlandsTTTournament");
        given(userService.createUser(Mockito.any())).willReturn(user);

        //when
        MockHttpServletRequestBuilder putRequest = put("/users/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(userPutDTO));

        // then
        mockMvc.perform(putRequest)
                .andExpect(status().isOk());

    }


|||||||||||||||||||||||||||||||GameControllerTest|||||||||||||||||||||||||||||||||||||

    @Test
    public void updateGame_invalidInput_HTTPStatus404() throws Exception {
        
        // given
        Game game = new Game(user1, user2);

        GamePutDTO gamePutDTO = new GamePutDTO();
        gamePutDTO.setResult("11:8, 11:3, 11:7, 14:9"); // can be a dic instead of string? idk?
        given(gameService.createGame(Mockito.any())).willReturn(game);

        // when
        MockHttpServletRequestBuilder putRequest = post("/game/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(gamePutDTO));

        //then
        mockMvc.perform(putRequest)
                .andExpect(status().isNotFound());

    }

|||||||||||||||||||||||||||||||TournamentControllerTest||||||||||||||||||||||||||||||||||

    @Test
    public void tournaments_post_validInput() throws Exception {
        
        Tournament tournament = new Tournament();
        tournament.setId("1L");
        tournament.setGameLength(15);
        tournament.setBreakDuration(2);
        tournament.setNumberOfTables(4);
        tournament.setAmountOfPlayers(24);
        tournament.setMode(modes.BRACKET);
        tournament.setLocation("Fabios Zimmer");
        
        Tournament tempTournament = tournamentService.createTournament(user);

        TournamentPostDTO tourneyPostDTO = new TournamentPostDTO();
        tourneyPostDTO.setId("1L");
        tourneyPostDTO.setGameLength(15);
        tourneyPostDTO.setbreakDuration(2);
        tourneyPostDTO.setNumberOfTables(4);
        tourneyPostDTO.setAmountOfPlayers(24);
        tourneyPostDTO.setMode(modes.BRACKET);
        tourneyPostDTO.setLocation("Fabios Zimmer");
        
        MockHttpServletRequestBuilder postRequest = post("/tournaments")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(tourneyPostDTO);

        mockMvc.perform(postRequest)
                .andExpect(status.CREATED);
        
        assertEquals(tournamentService.findTournamentById(tempTournament.getId()).getGameLength(),tournament.getGameLength());
        assertEquals(tournamentService.findTournamentById(tempTournament.getId()).getBreakDuration(),tournament.getBreakDuration());
        assertEquals(tournamentService.findTournamentById(tempTournament.getId()).getNumberOfTables(),tournament.getNumberOfTables());
        assertEquals(tournamentService.findTournamentById(tempTournament.getId()).getAmountOfPlayers(),tournament.getAmountOfPlayers());
        assertEquals(tournamentService.findTournamentById(tempTournament.getId()).getMode(),tournament.getMode());
        assertEquals(tournamentService.findTournamentById(tempTournament.getId()).getLocation(),tournament.getLocation());
    }
    